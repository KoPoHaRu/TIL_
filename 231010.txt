CSS
HTML을 꾸며주는 언어
html이 웹페이지의 정보를 표현한다면 CSS는 html을 보기 좋게 디자인하는 역할

CSS 문법
h1 { color: yellow; font-size:2em; } 

선택자(selector) - h1
속성(property) - 
값(value)
선언(declaration) - color: yellow;
선언부(declaration block) - 중괄호를 포함한 부분
규칙(rule set) - 선택자까지 합쳐진 부분
CSS는 여러 규칙들이 모여서 만들어짐
속성명과 속성값 사이에는 개행을 하면안됨
선택자와 선언문 하나의 선언끼리는 개행을해도 상관이 없음
주석 
/* 내용 */ 

CSS 적용방식

inline 방식 
해당 요소에 직접 스타일 속성을 이용해서 규칙들을 선언하기 
<div style="...">내용<div>

Internal 방식
<head>태그에 <style>...<style>태그를 넣음

Exrernal 방식
외부 스타일 시트는 스타일 규칙들을 별도의 CSS 외부파일을 만들어서 넣는것
.CSS
<link> 태그를 이용해서 <head>태그안에 사용 
href=속성을 이용해서 css파일의 경로를 적용
rel=속성은 연결되는 파일이 이 html 문서와 어떤 관계인지 명시하는 속성
css파일과 연결할때는 stylesheet라고 적음
<link rel="stylesheet" href="./style.css></link>
실제로는 이 방법이 주로 사용됨

@import
스타일내에서 다른 스타일 시트를 불러오는것
스타일태그 내부 상단이나 외부 스타일시트 파일안 상단에 선언
거의 사용하지않음
@import url('css/style.css');

선택자
요소선택자(태그)
선택자중에 가장 기본이 되는 선택자
요소선택자는 선택자의 부분에 태그의 이름이 들어감
선택자는 그룹화가 가능함 - h1, h2, h3,h h4, h5, h6 { color: yellow; }
전체 선택자는 별표 기호를 이용하여 * { color: yellow; } 문서내의 모든 요소들을 선택하는 선택자
선택자뿐만아니라 선언들도 그룹화가 가능 - h1 { color: yellow; font-size: 2em; background-color: gray; } 
선택자와 선언 동시에 그룹화 가능 h1, h2, h3, h4, h5, h6 { color: yellow; font-size: 2em; background-color: gray; } 

<!doctype html>
<html lang="ko">
	<head>
	<meta char="uft-8">
	<title>CSS</title>
	<head>
	<body>
		<dl>
		<dt>HTML</dt>
		<dd><span>HTML</span>은 문서의 구조를 나타냅니다.</dd>
		<dt>CSS</dt>
		<dd><span>CSS</span>는 문서의 표현을 나타냅니다.</dd>
		</dl>
	</body>
</html>

HTML글자만 보라색으로 
CSS글자만 밑줄을 긋게 하기

클래스 선택자
요소에 구애받지않고 스타일 규칙을 적용할수있는 가장 일반적인 방법
class속성에 값을 넣게되면 클래스 선택자를 이용해서 해당 요소의 스타일 규칙을 적용할수 있음
HTML
<p class="foo">...</p>
CSS
.foo { font-size: 30px; } 
어느 요소던지 클래스 속성이 foo로 선언된 요소가 있다면 모두 해당 스타일 규칙을 적용받게 됨
클래스 선택자는 앞에 . 을 찍음

다중 CLASS
하나의 요소에 여러개의 클래스를 넣을수 있음
CSS
.foo { font-size: 30px; } 
.bar { color: blue; } 
HTML
<p class="foo bar">... </p>

<!doctype html>
<html lang="ko">
	<head>
	<meta char="uft-8">
	<title>CSS</title>
	<style>
	.css { color: purple; }
	.css { text-decoration: underline; } 
	</style>
	<head>
	<body>	
		<dt class="css">JS</dt>
		<dd><span class="css">JS</span>는 문서의 동작을 나타냅니다.</dd>		
	</body>
</html>

ID 선택자
CSS 선택자는 . 대신 #을 사용하고 
HTML 요소에는 class 속성대신에 id속성을 사용함
ID선택자로 규칙을 적용시킬수있는 요소는 오직 하나
구체성의 값이 다름

CLASS 선택자와의 차이점
. 기호가 아닌 # 기호를 사용
태그의 class 속성이 아닌 id 속성을 참조
문서내에 유일한 요소에 사용
구체성

선택자의 조합
요소와 클래스의 조합
p.bar { ... } 
다중 클래스 단 class="foo bar" 이런 경우에 해당
.foo.bar { ... } 
아이디와 클래스의 조합
#foo.bar { ... }     

속성 선택자
태그의 속성을 이용해서 요소를 선택하기
단순 속성으로 선택

정확한 속성값으로 선택
p[class="foo"] { color: silver; } 
p[id="title"] { text-decoration; underline; }

<p class="foo">Hello</p>
<p class="bar">CSS</p>
<p class="baz" id="title"></p>

<!doctpye html>
<html lang="ko">
	<haed>
		<meta char="utf-8">
		<title>CSS</title>
		<style>
		p[class="foo"] { color: silver } 
		p[id="title"] { text-decoration: underline; } 
		</style>
	</head>
	<body>
	<p class="foo">Hello</p>
	<p class="bar">CSS</p>
	<p class="baz" id="title">HTML</p>
	</body>
</html>

부분 속성값으로 선택
[class~="bar"]:class 속성의 값이 공백으로 구분한 "bar"단어가 포함되는 요소 선택
[class^="bar"]:class 속성의 값이 "bar"로 시작하는 요소 선택
[class$="bar"]:class 속성의 값이 "bar"로 끝나는 요소 선택
[class*="bar"]:class 속성의 값이 "bar"문자가 포함되는 요소 선택

<!doctpye html>
<html lang="ko">
	<haed>
		<meta char="utf-8">
		<title>CSS</title>
		<style media="screen">
		p[class~="color"] { font-style: italic; } 
		p[class^="color"] { font-style: italic; }
		p[class$="color"] { font-style: italic; } 
		p[class*="color"] { font-style: italic; } 
		
		</style>
	</head>
	<body>
		<p class="color hot">red</p>
		<p class="cool color">blue</p>
		<p class="colorful nature">rainbow</p>
	</body>
</html>


